{"version":3,"sources":["webpack:///../gatsby-theme-aksite/src/templates/post-template.js"],"names":["Siblings","nodes","container","spacing","slice","map","v","item","xs","sm","key","id","node","PrevNextPost","prevPost","nextPost","style","marginBottom","md","to","fields","slug","postTitle","PostTemplate","data","pageContext","console","log","mdx","crumbs","breadcrumb","title","frontmatter","description","excerpt","cover","publicURL","index","allMdx","indexOf","length","siblings","filter","directory","tableOfContents","crumbLabel","variant","directoryLabel"],"mappings":"8FAAA,wNA+BMA,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACf,uBACI,YAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,GACpBF,EAAMG,MAAM,EAAG,GAAGC,KAAI,SAAAC,GAAC,OACnB,YAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,IAAKJ,EAAEK,IAAI,YAAC,IAAD,CAAUC,KAAMN,WAM/DO,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAb,OACnB,mBAAKC,MAAO,CAAEC,aAAc,SACxB,YAAC,IAAD,CAAMf,WAAS,GACX,YAAC,IAAD,CAAMK,MAAI,EAACW,GAAI,EAAGT,GAAI,IACjBK,GAAa,YAAC,IAAD,KAAU,YAAC,IAAD,KAAM,YAAC,OAAD,CAAMK,GAAIL,EAASM,OAAOC,MAA1B,KAAmCP,EAASM,OAAOE,cAErF,YAAC,IAAD,CAAMf,MAAI,EAACW,GAAI,EAAGT,GAAI,IACjBM,GAAa,YAAC,IAAD,KAAW,YAAC,IAAD,KAAM,YAAC,OAAD,CAAMI,GAAIJ,EAASK,OAAOC,MAAON,EAASK,OAAOE,UAAjD,YAM9B,SAASC,EAAT,GAA8C,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YAC3CC,QAAQC,IAAR,oBAAgCH,EAAKI,IAAIR,OAAOC,MAChD,IAAMT,EAAOY,EAAKI,IACIC,EAAaJ,EAA3BK,WAAcD,OAEhBE,EAAQnB,EAAKQ,OAAOE,WAAaV,EAAKoB,YAAYD,MAClDE,EAAcrB,EAAKoB,YAAYC,aAAerB,EAAKsB,QACnDC,EAAK,UAAGvB,EAAKoB,YAAYG,aAApB,aAAG,EAAwBC,UAChCC,EAAQb,EAAKc,OAAOrC,MAAMI,KAAI,SAAAC,GAAC,OAAIA,EAAEK,MAAI4B,QAAQ3B,EAAKD,IACtDG,EAAYuB,EAAQ,EAAKb,EAAKc,OAAOrC,MAAMoC,EAAQ,GAAK,KACxDtB,EAAYsB,EAAQb,EAAKc,OAAOrC,MAAMuC,OAAUhB,EAAKc,OAAOrC,MAAMoC,EAAQ,GAAK,KAC/EI,EAAWjB,EAAKc,OAAOrC,MAAMyC,QAAO,SAAApC,GAAC,OACxCA,EAAEK,KAAOC,EAAKD,IAAQL,EAAEc,OAAOuB,YAAc/B,EAAKQ,OAAOuB,aAE5D,OACE,YAAC,IAAD,CAAQC,gBAAiBhC,EAAKgC,iBAC5B,YAAC,IAAD,CAAKb,MAAOA,EAAOE,YAAaA,EAAaE,MAAOA,IAEpD,YAAC,IAAD,CAAYN,OAAQA,EAAQgB,WAAYd,IAExC,YAAC,IAAD,CAAMnB,KAAMA,EAAM6B,SAAUA,EAC1B3B,SAAUA,EAAUC,SAAUA,IAEhC,uBACE,YAACF,EAAD,CAAcC,SAAUA,EAAUC,SAAUA,IAC5C,YAAC,IAAD,MACC0B,GAAa,8BACZ,YAAC,IAAD,CAAYK,QAAQ,MAApB,gBAAuClC,EAAKQ,OAAO2B,eAAnD,KACA,YAAC/C,EAAD,CAAUC,MAAOwC","file":"component---gatsby-theme-aksite-src-templates-post-template-js-f81753f8d46b49ed88c6.js","sourcesContent":["import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\n//import { Breadcrumb } from 'gatsby-plugin-breadcrumb'\nimport Breadcrumb from '../components/Breadcrumb'\nimport Grid from '@material-ui/core/Grid'\nimport Divider from '@material-ui/core/Divider'\nimport Typography from '@material-ui/core/Typography'\n\nimport Layout from \"../components/Layout\"\nimport Post from \"../components/Post\"\nimport SEO from '../components/SEO'\nimport HoverBox from '../components/HoverBox'\nimport Card from '../components/Card'\nimport PostCard from '../components/PostCard'\n\nexport const query = graphql`\n    query ($slug: String!) {\n      mdx(fields: { slug: { eq: $slug }}){\n        ...postFieldsBody\n               \n      }\n\n      allMdx(sort: {fields: frontmatter___date, order: ASC}) {\n        nodes {\n          ...postFields\n        }\n      }\n    }\n\n`\n\nconst Siblings = ({ nodes }) => (\n  <nav>\n      <Grid container spacing={3}>\n          {nodes.slice(0, 9).map(v =>\n              (<Grid item xs={12} sm={12} key={v.id}><PostCard node={v} /></Grid>))\n          }\n      </Grid>\n  </nav>\n)\n\nconst PrevNextPost = ({ prevPost, nextPost }) => (\n  <nav style={{ marginBottom: \"2rem\" }}>\n      <Grid container>\n          <Grid item md={6} sm={12}>\n              {prevPost && (<HoverBox><Card><Link to={prevPost.fields.slug}>《 {prevPost.fields.postTitle}</Link></Card></HoverBox>)}\n          </Grid>\n          <Grid item md={6} sm={12}>\n              {nextPost && (<HoverBox ><Card><Link to={nextPost.fields.slug}>{nextPost.fields.postTitle} 》</Link></Card></HoverBox>)}\n          </Grid>\n      </Grid>\n  </nav>\n)\n\nexport default function PostTemplate({ data, pageContext }) {\n  console.log(`create/template: ${data.mdx.fields.slug}`)\n  const node = data.mdx\n  const { breadcrumb: { crumbs } } = pageContext\n\n  const title = node.fields.postTitle || node.frontmatter.title\n  const description = node.frontmatter.description || node.excerpt\n  const cover = node.frontmatter.cover?.publicURL\n  const index = data.allMdx.nodes.map(v => v.id).indexOf(node.id)\n  const prevPost = (index > 0) ? data.allMdx.nodes[index - 1] : null\n  const nextPost = (index < data.allMdx.nodes.length) ? data.allMdx.nodes[index + 1] : null\n  const siblings = data.allMdx.nodes.filter(v =>\n    (v.id !== node.id) && (v.fields.directory === node.fields.directory))\n\n  return (\n    <Layout tableOfContents={node.tableOfContents} >\n      <SEO title={title} description={description} cover={cover} />\n\n      <Breadcrumb crumbs={crumbs} crumbLabel={title} />\n\n      <Post node={node} siblings={siblings}\n        prevPost={prevPost} nextPost={nextPost} />\n\n      <nav>\n        <PrevNextPost prevPost={prevPost} nextPost={nextPost} />\n        <Divider />\n        {siblings && (<>\n          <Typography variant=\"h3\">Siblings on '{node.fields.directoryLabel}'</Typography>\n          <Siblings nodes={siblings} />\n        </>)}\n      </nav>\n    </Layout>\n  )\n}\n"],"sourceRoot":""}