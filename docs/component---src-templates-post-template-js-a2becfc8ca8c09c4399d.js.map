{"version":3,"sources":["webpack:///./src/templates/post-template.js"],"names":["Siblings","nodes","container","spacing","slice","map","v","item","xs","sm","key","id","node","PostTemplate","data","pageContext","mdx","crumbs","breadcrumb","console","log","fields","slug","title","frontmatter","description","excerpt","image","tableOfContents","crumbLabel","directoryLabel","directory","siblings","filter"],"mappings":"4FAAA,6JA4DMA,EAAW,SAAC,GAAD,IAAIC,EAAJ,EAAIA,MAAJ,OACf,uBACE,YAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,GACtBF,EAAMG,MAAM,EAAG,GAAGC,KAAI,SAAAC,GAAC,OACrB,YAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,IAAKJ,EAAEK,IAAI,YAAC,IAAD,CAAUC,KAAMN,WAM/C,SAASO,EAAT,GAA8C,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YACrCH,EAAOE,EAAKE,IAEIC,EAAaF,EAA3BG,WAAcD,OAItB,OAFAE,QAAQC,IAAR,oBAAgCR,EAAKS,OAAOC,MAG1C,YAAC,IAAD,CAAQC,MAAOX,EAAKY,YAAYD,MAAOE,YAAab,EAAKY,YAAYC,aAAeb,EAAKc,QACxFC,MAAOf,EAAKY,YAAYG,MAAOC,gBAAiBhB,EAAKgB,iBAEpD,YAAC,aAAD,CAAYX,OAAQA,EAAQY,WAAYjB,EAAKY,YAAYD,QAEzD,YAAC,IAAD,CAAMX,KAAMA,IAEZ,sCAAkBkB,YAAelB,EAAKS,OAAOU,WAA7C,KACA,YAAC/B,EAAD,CAAUC,MAAOa,EAAKkB,SAAS/B,MAAMgC,QAAO,SAAA3B,GAAC,OAAIA,EAAEe,OAAOC,OAASV,EAAKS,OAAOC","file":"component---src-templates-post-template-js-a2becfc8ca8c09c4399d.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { Breadcrumb } from 'gatsby-plugin-breadcrumb'\nimport Grid from '@material-ui/core/Grid'\n\nimport Layout from \"../components/layout.js\"\nimport directoryLabel from '../utils/directory_label'\nimport Post from \"../components/post.js\"\nimport PostCard from '../components/post_card'\nimport Img from 'gatsby-image'\n\nexport const query = graphql`\n    query ($slug: String!, $directory: String!) {\n      site { siteMetadata { siteUrl }}\n      mdx(fields: { slug: { eq: $slug }}){\n        id\n        tableOfContents\n        body\n        excerpt(pruneLength: 100)\n        frontmatter {\n          title\n          date(formatString: \"YYYY-MM-DD\")\n          description\n          cover { \n            childImageSharp {\n              fluid(maxWidth: 800) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n        fields {\n          slug, directory\n        }        \n      }\n      siblings: allMdx(filter: { fields: { directory: { eq: $directory} }}){\n        nodes {\n          id\n          excerpt(pruneLength: 100)\n          frontmatter {\n            title\n            date(formatString: \"YYYY-MM-DD\")\n            description\n            cover { \n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          fields {\n            slug, directory\n          }\n        }\n      }\n    }\n\n`\n\nconst Siblings = ( { nodes }) => (\n  <nav>\n    <Grid container spacing={3}>\n      {nodes.slice(0, 9).map(v =>\n        (<Grid item xs={12} sm={6} key={v.id}><PostCard node={v} /></Grid>))\n      }\n    </Grid>\n  </nav>\n)\n\nexport default function PostTemplate({ data, pageContext }) {\n  const node = data.mdx\n  \n  const { breadcrumb: { crumbs } } = pageContext\n  \n  console.log(`create/template: ${node.fields.slug}`)\n\n  return (\n    <Layout title={node.frontmatter.title} description={node.frontmatter.description || node.excerpt} \n     image={node.frontmatter.image} tableOfContents={node.tableOfContents} \n     >\n      <Breadcrumb crumbs={crumbs} crumbLabel={node.frontmatter.title} />\n\n      <Post node={node} />\n\n      <h4>Siblings on '{directoryLabel(node.fields.directory)}'</h4>\n      <Siblings nodes={data.siblings.nodes.filter(v => v.fields.slug !== node.fields.slug)} />\n    </Layout>\n  )\n}\n"],"sourceRoot":""}